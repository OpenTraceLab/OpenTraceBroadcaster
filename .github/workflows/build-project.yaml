name: Build Project
on:
  workflow_call:
    outputs:
      pluginName:
        description: Project name detected by parsing build spec file
        value: ${{ jobs.check-event.outputs.pluginName }}
jobs:
  check-event:
    name: Check GitHub Event Data 🔎
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    outputs:
      package: ${{ steps.setup.outputs.package }}
      codesign: ${{ steps.setup.outputs.codesign }}
      notarize: ${{ steps.setup.outputs.notarize }}
      config: ${{ steps.setup.outputs.config }}
      commitHash: ${{ steps.setup.outputs.commitHash }}
      pluginName: ${{ steps.setup.outputs.pluginName }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check Event Data ☑️
        id: setup
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          case "${GITHUB_EVENT_NAME}" in
            pull_request)
              config_data=('codesign:false' 'notarize:false' 'package:false' 'config:debugoptimized')
              if gh pr view ${{ github.event.number }} --json labels \
                | jq -e -r '.labels[] | select(.name == "Seeking Testers")' > /dev/null; then
                config_data[0]='codesign:true'
                config_data[2]='package:true'
              fi
              ;;
            push)
              config_data=('codesign:true' 'notarize:false' 'package:true' 'config:release')
              if [[ ${GITHUB_REF_NAME} =~ [0-9]+.[0-9]+.[0-9]+(-(rc|beta).+)? ]]; then
                config_data[1]='notarize:true'
              fi
              ;;
            workflow_dispatch)
              config_data=('codesign:true' 'notarize:false' 'package:false' 'config:debugoptimized')
              ;;
            schedule)
              config_data=('codesign:true' 'notarize:false' 'package:true' 'config:release')
              ;;
            *) ;;
          esac

          for config in "${config_data[@]}"; do
            IFS=':' read -r key value <<< "${config}"
            echo "${key}=${value}" >> $GITHUB_OUTPUT
          done
          echo "commitHash=${GITHUB_SHA:0:9}" >> $GITHUB_OUTPUT

          plugin_name="$(jq -r '.name' buildspec.json)"
          plugin_display_name="$(jq -r '.displayName // empty' buildspec.json)"

          if [[ "${plugin_display_name}" ]]; then
            echo "pluginName=${plugin_display_name}" >> $GITHUB_OUTPUT
          else
            echo "pluginName=${plugin_name}" >> $GITHUB_OUTPUT
          fi

  macos-build:
    name: Build for macOS ARM64 🍏
    runs-on: macos-15
    needs: check-event
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set Up Environment 🔧
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.1.0.app/Contents/Developer
          brew install meson ninja pkg-config

      - name: Download Dependencies 📦
        run: |
          ./download-deps.ps1 -OutputDir "deps"
        shell: pwsh

      - name: Build with Meson 🧱
        run: |
          meson setup build --buildtype=${{ needs.check-event.outputs.config }} \
            --cross-file=cross/macos-arm64.txt
          meson compile -C build

      - name: Package Plugin 📀
        run: |
          meson install -C build --destdir=install
          cd install && tar -czf ../obs-measurement-overlay-macos-arm64.tar.gz *

      - name: Upload Artifacts 📡
        uses: actions/upload-artifact@v4
        with:
          name: obs-measurement-overlay-macos-arm64-${{ needs.check-event.outputs.commitHash }}
          path: obs-measurement-overlay-macos-arm64.tar.gz

  windows-build:
    name: Build for Windows x64 🪟
    runs-on: windows-2022
    needs: check-event
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Meson and Ninja
        run: |
          python -m pip install --upgrade pip
          pip install meson ninja

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install pkg-config
        run: |
          choco install pkgconfiglite

      - name: Download OBS Studio
        run: |
          # Get latest OBS Studio release
          $obsVersion = (Invoke-RestMethod -Uri "https://api.github.com/repos/obsproject/obs-studio/releases/latest").tag_name
          Write-Host "Using OBS Studio version: $obsVersion"
          
          Invoke-WebRequest -Uri "https://github.com/obsproject/obs-studio/releases/download/$obsVersion/OBS-Studio-$obsVersion-Windows-x64.zip" -OutFile "obs-studio.zip"
          Expand-Archive -Path "obs-studio.zip" -DestinationPath "obs-studio"
          
          # Set environment variables for OBS
          echo "OBS_ROOT=$env:GITHUB_WORKSPACE\obs-studio" >> $env:GITHUB_ENV
          echo "$env:GITHUB_WORKSPACE\obs-studio\bin\64bit" >> $env:GITHUB_PATH

      - name: Download Dependencies 📦
        run: |
          .\download-deps.ps1 -OutputDir "deps"

      - name: Build with Meson 🧱
        run: |
          meson setup build --buildtype=${{ needs.check-event.outputs.config }}
          meson compile -C build

      - name: Package Plugin 📀
        run: |
          meson install -C build --destdir=install
          Compress-Archive -Path install\* -DestinationPath obs-measurement-overlay-windows-x64.zip

      - name: Upload Artifacts 📡
        uses: actions/upload-artifact@v4
        with:
          name: obs-measurement-overlay-windows-x64-${{ needs.check-event.outputs.commitHash }}
          path: obs-measurement-overlay-windows-x64.zip

  ubuntu-build:
    name: Build for Ubuntu x64 🐧
    runs-on: ubuntu-24.04
    needs: check-event
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Dependencies 📦
        run: |
          sudo add-apt-repository --yes ppa:obsproject/obs-studio
          sudo apt update
          sudo apt-get install -y \
            meson ninja-build pkg-config \
            build-essential \
            libgles2-mesa-dev \
            libsimde-dev \
            obs-studio

      - name: Download OpenTraceCapture 📦
        run: |
          # Download latest OpenTraceCapture release for Ubuntu
          echo "Checking available releases..."
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/OpenTraceLab/OpenTraceCapture/releases | jq -r '.[0].tag_name')
          echo "Using release: $LATEST_RELEASE"
          wget "https://github.com/OpenTraceLab/OpenTraceCapture/releases/download/${LATEST_RELEASE}/opentracecapture-linux.tar.gz"
          mkdir -p /usr/local
          sudo tar -xzf opentracecapture-linux.tar.gz -C /usr/local --strip-components=1

      - name: Build with Meson 🧱
        run: |
          meson setup build --buildtype=${{ needs.check-event.outputs.config }}
          meson compile -C build

      - name: Package Plugin 📀
        run: |
          meson install -C build --destdir=install
          cd install && tar -czf ../obs-measurement-overlay-ubuntu-x64.tar.gz *

      - name: Upload Artifacts 📡
        uses: actions/upload-artifact@v4
        with:
          name: obs-measurement-overlay-ubuntu-x64-${{ needs.check-event.outputs.commitHash }}
          path: obs-measurement-overlay-ubuntu-x64.tar.gz
